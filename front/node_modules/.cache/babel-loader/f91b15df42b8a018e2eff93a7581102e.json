{"ast":null,"code":"var _jsxFileName = \"/Users/alex-lz/Desktop/vendimia/front/src/components/AutocompleteArt.js\";\nimport React, { Component } from 'react';\nimport './Autocomplete.css';\n\nclass AutocompleteArt extends Component {\n  componentDidMount() {\n    function autocomplete(inp, arr, mod, can, pre) {\n      /*the autocomplete function takes two arguments,\n      the text field element and an array of possible autocompleted values:*/\n      var currentFocus;\n      /*execute a function when someone writes in the text field:*/\n\n      inp.addEventListener(\"input\", function (e) {\n        var a,\n            b,\n            i,\n            val = this.value;\n        /*close any already open lists of autocompleted values*/\n\n        closeAllLists();\n\n        if (!val) {\n          return false;\n        }\n\n        currentFocus = -1;\n        /*create a DIV element that will contain the items (values):*/\n\n        a = document.createElement(\"DIV\");\n        a.setAttribute(\"id\", this.id + \"autocomplete-list\");\n        a.setAttribute(\"class\", \"autocomplete-items\");\n        /*append the DIV element as a child of the autocomplete container:*/\n\n        this.parentNode.appendChild(a);\n        /*for each item in the array...*/\n\n        for (i = 0; i < arr.length; i++) {\n          /*check if the item starts with the same letters as the text field value:*/\n          if (arr[i].substr(0, val.length).toUpperCase() == val.toUpperCase()) {\n            /*create a DIV element for each matching element:*/\n            b = document.createElement(\"DIV\");\n            /*make the matching letters bold:*/\n\n            b.innerHTML = \"<strong>\" + arr[i].substr(0, val.length) + \"</strong>\";\n            b.innerHTML += arr[i].substr(val.length);\n            /*insert a input field that will hold the current array item's value:*/\n\n            b.innerHTML += \"<input type='hidden' value='\" + arr[i] + \"'>\";\n            b.innerHTML += \"<input type='hidden' value='\" + mod[i] + \"'>\";\n            b.innerHTML += \"<input type='hidden' value='\" + can[i] + \"'>\";\n            b.innerHTML += \"<input type='hidden' value='\" + pre[i] + \"'>\";\n            /*execute a function when someone clicks on the item value (DIV element):*/\n\n            b.addEventListener(\"click\", function (e) {\n              /*insert the value for the autocomplete text field:*/\n              let artDescrip = this.getElementsByTagName(\"input\")[0].value;\n              let modelo = this.getElementsByTagName(\"input\")[1].value;\n              let cantidad = this.getElementsByTagName(\"input\")[2].value;\n              let precio = this.getElementsByTagName(\"input\")[3].value;\n              localStorage.descripcion = artDescrip;\n              localStorage.modelo = modelo;\n              localStorage.cantidad = cantidad;\n              localStorage.precio = precio;\n              inp.value = artDescrip; // span.innerHTML = 'RFC: ' + rfc;\n\n              /*close the list of autocompleted values,\n              (or any other open lists of autocompleted values:*/\n\n              closeAllLists();\n            });\n            a.appendChild(b);\n          }\n        }\n      });\n      /*execute a function presses a key on the keyboard:*/\n\n      inp.addEventListener(\"keydown\", function (e) {\n        var x = document.getElementById(this.id + \"autocomplete-list\");\n        if (x) x = x.getElementsByTagName(\"div\");\n\n        if (e.keyCode == 40) {\n          /*If the arrow DOWN key is pressed,\n          increase the currentFocus variable:*/\n          currentFocus++;\n          /*and and make the current item more visible:*/\n\n          addActive(x);\n        } else if (e.keyCode == 38) {\n          //up\n\n          /*If the arrow UP key is pressed,\n          decrease the currentFocus variable:*/\n          currentFocus--;\n          /*and and make the current item more visible:*/\n\n          addActive(x);\n        } else if (e.keyCode == 13) {\n          /*If the ENTER key is pressed, prevent the form from being submitted,*/\n          e.preventDefault();\n\n          if (currentFocus > -1) {\n            /*and simulate a click on the \"active\" item:*/\n            if (x) x[currentFocus].click();\n          }\n        }\n      });\n\n      function addActive(x) {\n        /*a function to classify an item as \"active\":*/\n        if (!x) return false;\n        /*start by removing the \"active\" class on all items:*/\n\n        removeActive(x);\n        if (currentFocus >= x.length) currentFocus = 0;\n        if (currentFocus < 0) currentFocus = x.length - 1;\n        /*add class \"autocomplete-active\":*/\n\n        x[currentFocus].classList.add(\"autocomplete-active\");\n      }\n\n      function removeActive(x) {\n        /*a function to remove the \"active\" class from all autocomplete items:*/\n        for (var i = 0; i < x.length; i++) {\n          x[i].classList.remove(\"autocomplete-active\");\n        }\n      }\n\n      function closeAllLists(elmnt) {\n        /*close all autocomplete lists in the document,\n        except the one passed as an argument:*/\n        var x = document.getElementsByClassName(\"autocomplete-items\");\n\n        for (var i = 0; i < x.length; i++) {\n          if (elmnt != x[i] && elmnt != inp) {\n            x[i].parentNode.removeChild(x[i]);\n          }\n        }\n      }\n      /*execute a function when someone clicks in the document:*/\n\n\n      document.addEventListener(\"click\", function (e) {\n        closeAllLists(e.target);\n      });\n    }\n\n    autocomplete(document.getElementById(\"myInput2\"), this.props.arts, this.props.modelo, this.props.cantidad, this.props.precio);\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"autocomplete art\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      id: \"myInput2\",\n      type: \"text\",\n      name: \"myArt\",\n      placeholder: this.props.ph,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default AutocompleteArt;","map":{"version":3,"sources":["/Users/alex-lz/Desktop/vendimia/front/src/components/AutocompleteArt.js"],"names":["React","Component","AutocompleteArt","componentDidMount","autocomplete","inp","arr","mod","can","pre","currentFocus","addEventListener","e","a","b","i","val","value","closeAllLists","document","createElement","setAttribute","id","parentNode","appendChild","length","substr","toUpperCase","innerHTML","artDescrip","getElementsByTagName","modelo","cantidad","precio","localStorage","descripcion","x","getElementById","keyCode","addActive","preventDefault","click","removeActive","classList","add","remove","elmnt","getElementsByClassName","removeChild","target","props","arts","render","ph"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,oBAAP;;AAEA,MAAMC,eAAN,SAA8BD,SAA9B,CAAwC;AAEtCE,EAAAA,iBAAiB,GAAG;AAElB,aAASC,YAAT,CAAsBC,GAAtB,EAA2BC,GAA3B,EAAgCC,GAAhC,EAAqCC,GAArC,EAA0CC,GAA1C,EAA+C;AAC3C;;AAEA,UAAIC,YAAJ;AACA;;AACAL,MAAAA,GAAG,CAACM,gBAAJ,CAAqB,OAArB,EAA8B,UAASC,CAAT,EAAY;AACtC,YAAIC,CAAJ;AAAA,YAAOC,CAAP;AAAA,YAAUC,CAAV;AAAA,YAAaC,GAAG,GAAG,KAAKC,KAAxB;AACA;;AACAC,QAAAA,aAAa;;AACb,YAAI,CAACF,GAAL,EAAU;AAAE,iBAAO,KAAP;AAAc;;AAC1BN,QAAAA,YAAY,GAAG,CAAC,CAAhB;AACA;;AACAG,QAAAA,CAAC,GAAGM,QAAQ,CAACC,aAAT,CAAuB,KAAvB,CAAJ;AACAP,QAAAA,CAAC,CAACQ,YAAF,CAAe,IAAf,EAAqB,KAAKC,EAAL,GAAU,mBAA/B;AACAT,QAAAA,CAAC,CAACQ,YAAF,CAAe,OAAf,EAAwB,oBAAxB;AACA;;AACA,aAAKE,UAAL,CAAgBC,WAAhB,CAA4BX,CAA5B;AACA;;AACA,aAAKE,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGT,GAAG,CAACmB,MAApB,EAA4BV,CAAC,EAA7B,EAAiC;AAC/B;AACA,cAAIT,GAAG,CAACS,CAAD,CAAH,CAAOW,MAAP,CAAc,CAAd,EAAiBV,GAAG,CAACS,MAArB,EAA6BE,WAA7B,MAA8CX,GAAG,CAACW,WAAJ,EAAlD,EAAqE;AACnE;AACAb,YAAAA,CAAC,GAAGK,QAAQ,CAACC,aAAT,CAAuB,KAAvB,CAAJ;AACA;;AACAN,YAAAA,CAAC,CAACc,SAAF,GAAc,aAAatB,GAAG,CAACS,CAAD,CAAH,CAAOW,MAAP,CAAc,CAAd,EAAiBV,GAAG,CAACS,MAArB,CAAb,GAA4C,WAA1D;AACAX,YAAAA,CAAC,CAACc,SAAF,IAAetB,GAAG,CAACS,CAAD,CAAH,CAAOW,MAAP,CAAcV,GAAG,CAACS,MAAlB,CAAf;AACA;;AACAX,YAAAA,CAAC,CAACc,SAAF,IAAe,iCAAiCtB,GAAG,CAACS,CAAD,CAApC,GAA0C,IAAzD;AACAD,YAAAA,CAAC,CAACc,SAAF,IAAe,iCAAiCrB,GAAG,CAACQ,CAAD,CAApC,GAA0C,IAAzD;AACAD,YAAAA,CAAC,CAACc,SAAF,IAAe,iCAAiCpB,GAAG,CAACO,CAAD,CAApC,GAA0C,IAAzD;AACAD,YAAAA,CAAC,CAACc,SAAF,IAAe,iCAAiCnB,GAAG,CAACM,CAAD,CAApC,GAA0C,IAAzD;AACA;;AACAD,YAAAA,CAAC,CAACH,gBAAF,CAAmB,OAAnB,EAA4B,UAASC,CAAT,EAAY;AACpC;AACA,kBAAIiB,UAAU,GAAG,KAAKC,oBAAL,CAA0B,OAA1B,EAAmC,CAAnC,EAAsCb,KAAvD;AACA,kBAAIc,MAAM,GAAG,KAAKD,oBAAL,CAA0B,OAA1B,EAAmC,CAAnC,EAAsCb,KAAnD;AACA,kBAAIe,QAAQ,GAAG,KAAKF,oBAAL,CAA0B,OAA1B,EAAmC,CAAnC,EAAsCb,KAArD;AACA,kBAAIgB,MAAM,GAAG,KAAKH,oBAAL,CAA0B,OAA1B,EAAmC,CAAnC,EAAsCb,KAAnD;AACAiB,cAAAA,YAAY,CAACC,WAAb,GAA2BN,UAA3B;AACAK,cAAAA,YAAY,CAACH,MAAb,GAAsBA,MAAtB;AACAG,cAAAA,YAAY,CAACF,QAAb,GAAwBA,QAAxB;AACAE,cAAAA,YAAY,CAACD,MAAb,GAAsBA,MAAtB;AAEA5B,cAAAA,GAAG,CAACY,KAAJ,GAAYY,UAAZ,CAXoC,CAYpC;;AACA;;;AAEAX,cAAAA,aAAa;AAChB,aAhBD;AAiBAL,YAAAA,CAAC,CAACW,WAAF,CAAcV,CAAd;AACD;AACF;AACJ,OA/CD;AAgDA;;AACAT,MAAAA,GAAG,CAACM,gBAAJ,CAAqB,SAArB,EAAgC,UAASC,CAAT,EAAY;AACxC,YAAIwB,CAAC,GAAGjB,QAAQ,CAACkB,cAAT,CAAwB,KAAKf,EAAL,GAAU,mBAAlC,CAAR;AACA,YAAIc,CAAJ,EAAOA,CAAC,GAAGA,CAAC,CAACN,oBAAF,CAAuB,KAAvB,CAAJ;;AACP,YAAIlB,CAAC,CAAC0B,OAAF,IAAa,EAAjB,EAAqB;AACnB;;AAEA5B,UAAAA,YAAY;AACZ;;AACA6B,UAAAA,SAAS,CAACH,CAAD,CAAT;AACD,SAND,MAMO,IAAIxB,CAAC,CAAC0B,OAAF,IAAa,EAAjB,EAAqB;AAAE;;AAC5B;;AAEA5B,UAAAA,YAAY;AACZ;;AACA6B,UAAAA,SAAS,CAACH,CAAD,CAAT;AACD,SANM,MAMA,IAAIxB,CAAC,CAAC0B,OAAF,IAAa,EAAjB,EAAqB;AAC1B;AACA1B,UAAAA,CAAC,CAAC4B,cAAF;;AACA,cAAI9B,YAAY,GAAG,CAAC,CAApB,EAAuB;AACrB;AACA,gBAAI0B,CAAJ,EAAOA,CAAC,CAAC1B,YAAD,CAAD,CAAgB+B,KAAhB;AACR;AACF;AACJ,OAvBD;;AAwBA,eAASF,SAAT,CAAmBH,CAAnB,EAAsB;AACpB;AACA,YAAI,CAACA,CAAL,EAAQ,OAAO,KAAP;AACR;;AACAM,QAAAA,YAAY,CAACN,CAAD,CAAZ;AACA,YAAI1B,YAAY,IAAI0B,CAAC,CAACX,MAAtB,EAA8Bf,YAAY,GAAG,CAAf;AAC9B,YAAIA,YAAY,GAAG,CAAnB,EAAsBA,YAAY,GAAI0B,CAAC,CAACX,MAAF,GAAW,CAA3B;AACtB;;AACAW,QAAAA,CAAC,CAAC1B,YAAD,CAAD,CAAgBiC,SAAhB,CAA0BC,GAA1B,CAA8B,qBAA9B;AACD;;AACD,eAASF,YAAT,CAAsBN,CAAtB,EAAyB;AACvB;AACA,aAAK,IAAIrB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGqB,CAAC,CAACX,MAAtB,EAA8BV,CAAC,EAA/B,EAAmC;AACjCqB,UAAAA,CAAC,CAACrB,CAAD,CAAD,CAAK4B,SAAL,CAAeE,MAAf,CAAsB,qBAAtB;AACD;AACF;;AACD,eAAS3B,aAAT,CAAuB4B,KAAvB,EAA8B;AAC5B;;AAEA,YAAIV,CAAC,GAAGjB,QAAQ,CAAC4B,sBAAT,CAAgC,oBAAhC,CAAR;;AACA,aAAK,IAAIhC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGqB,CAAC,CAACX,MAAtB,EAA8BV,CAAC,EAA/B,EAAmC;AACjC,cAAI+B,KAAK,IAAIV,CAAC,CAACrB,CAAD,CAAV,IAAiB+B,KAAK,IAAIzC,GAA9B,EAAmC;AACjC+B,YAAAA,CAAC,CAACrB,CAAD,CAAD,CAAKQ,UAAL,CAAgByB,WAAhB,CAA4BZ,CAAC,CAACrB,CAAD,CAA7B;AACD;AACF;AACF;AACD;;;AACAI,MAAAA,QAAQ,CAACR,gBAAT,CAA0B,OAA1B,EAAmC,UAAUC,CAAV,EAAa;AAC5CM,QAAAA,aAAa,CAACN,CAAC,CAACqC,MAAH,CAAb;AACH,OAFD;AAGD;;AAED7C,IAAAA,YAAY,CACRe,QAAQ,CAACkB,cAAT,CAAwB,UAAxB,CADQ,EAER,KAAKa,KAAL,CAAWC,IAFH,EAGR,KAAKD,KAAL,CAAWnB,MAHH,EAIR,KAAKmB,KAAL,CAAWlB,QAJH,EAKR,KAAKkB,KAAL,CAAWjB,MALH,CAAZ;AAOH;;AAEDmB,EAAAA,MAAM,GAAG;AACP,WACM;AAAK,MAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAO,MAAA,EAAE,EAAC,UAAV;AAAqB,MAAA,IAAI,EAAC,MAA1B;AAAiC,MAAA,IAAI,EAAC,OAAtC;AAA8C,MAAA,WAAW,EAAE,KAAKF,KAAL,CAAWG,EAAtE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADN;AAKD;;AAjIqC;;AAqIxC,eAAenD,eAAf","sourcesContent":["import React, { Component } from 'react';\nimport './Autocomplete.css'\n\nclass AutocompleteArt extends Component {\n\n  componentDidMount() {\n    \n    function autocomplete(inp, arr, mod, can, pre) {\n        /*the autocomplete function takes two arguments,\n        the text field element and an array of possible autocompleted values:*/\n        var currentFocus;\n        /*execute a function when someone writes in the text field:*/\n        inp.addEventListener(\"input\", function(e) {\n            var a, b, i, val = this.value;\n            /*close any already open lists of autocompleted values*/\n            closeAllLists();\n            if (!val) { return false;}\n            currentFocus = -1;\n            /*create a DIV element that will contain the items (values):*/\n            a = document.createElement(\"DIV\");\n            a.setAttribute(\"id\", this.id + \"autocomplete-list\");\n            a.setAttribute(\"class\", \"autocomplete-items\");\n            /*append the DIV element as a child of the autocomplete container:*/\n            this.parentNode.appendChild(a);\n            /*for each item in the array...*/\n            for (i = 0; i < arr.length; i++) {\n              /*check if the item starts with the same letters as the text field value:*/\n              if (arr[i].substr(0, val.length).toUpperCase() == val.toUpperCase()) {\n                /*create a DIV element for each matching element:*/\n                b = document.createElement(\"DIV\");\n                /*make the matching letters bold:*/\n                b.innerHTML = \"<strong>\" + arr[i].substr(0, val.length) + \"</strong>\";\n                b.innerHTML += arr[i].substr(val.length);\n                /*insert a input field that will hold the current array item's value:*/\n                b.innerHTML += \"<input type='hidden' value='\" + arr[i] + \"'>\";\n                b.innerHTML += \"<input type='hidden' value='\" + mod[i] + \"'>\";\n                b.innerHTML += \"<input type='hidden' value='\" + can[i] + \"'>\";\n                b.innerHTML += \"<input type='hidden' value='\" + pre[i] + \"'>\";\n                /*execute a function when someone clicks on the item value (DIV element):*/\n                b.addEventListener(\"click\", function(e) {\n                    /*insert the value for the autocomplete text field:*/\n                    let artDescrip = this.getElementsByTagName(\"input\")[0].value;\n                    let modelo = this.getElementsByTagName(\"input\")[1].value;\n                    let cantidad = this.getElementsByTagName(\"input\")[2].value;\n                    let precio = this.getElementsByTagName(\"input\")[3].value;\n                    localStorage.descripcion = artDescrip;\n                    localStorage.modelo = modelo; \n                    localStorage.cantidad = cantidad; \n                    localStorage.precio = precio;\n                                     \n                    inp.value = artDescrip;\n                    // span.innerHTML = 'RFC: ' + rfc;\n                    /*close the list of autocompleted values,\n                    (or any other open lists of autocompleted values:*/\n                    closeAllLists();\n                });\n                a.appendChild(b);\n              }\n            }\n        });\n        /*execute a function presses a key on the keyboard:*/\n        inp.addEventListener(\"keydown\", function(e) {\n            var x = document.getElementById(this.id + \"autocomplete-list\");\n            if (x) x = x.getElementsByTagName(\"div\");\n            if (e.keyCode == 40) {\n              /*If the arrow DOWN key is pressed,\n              increase the currentFocus variable:*/\n              currentFocus++;\n              /*and and make the current item more visible:*/\n              addActive(x);\n            } else if (e.keyCode == 38) { //up\n              /*If the arrow UP key is pressed,\n              decrease the currentFocus variable:*/\n              currentFocus--;\n              /*and and make the current item more visible:*/\n              addActive(x);\n            } else if (e.keyCode == 13) {\n              /*If the ENTER key is pressed, prevent the form from being submitted,*/\n              e.preventDefault();\n              if (currentFocus > -1) {\n                /*and simulate a click on the \"active\" item:*/\n                if (x) x[currentFocus].click();\n              }\n            }\n        });\n        function addActive(x) {\n          /*a function to classify an item as \"active\":*/\n          if (!x) return false;\n          /*start by removing the \"active\" class on all items:*/\n          removeActive(x);\n          if (currentFocus >= x.length) currentFocus = 0;\n          if (currentFocus < 0) currentFocus = (x.length - 1);\n          /*add class \"autocomplete-active\":*/\n          x[currentFocus].classList.add(\"autocomplete-active\");\n        }\n        function removeActive(x) {\n          /*a function to remove the \"active\" class from all autocomplete items:*/\n          for (var i = 0; i < x.length; i++) {\n            x[i].classList.remove(\"autocomplete-active\");\n          }\n        }\n        function closeAllLists(elmnt) {\n          /*close all autocomplete lists in the document,\n          except the one passed as an argument:*/\n          var x = document.getElementsByClassName(\"autocomplete-items\");\n          for (var i = 0; i < x.length; i++) {\n            if (elmnt != x[i] && elmnt != inp) {\n              x[i].parentNode.removeChild(x[i]);\n            }\n          }\n        }\n        /*execute a function when someone clicks in the document:*/\n        document.addEventListener(\"click\", function (e) {\n            closeAllLists(e.target);\n        });\n      }\n\n      autocomplete(\n          document.getElementById(\"myInput2\"), \n          this.props.arts,\n          this.props.modelo,\n          this.props.cantidad,\n          this.props.precio\n      );\n  }\n\n  render() {\n    return (\n          <div className=\"autocomplete art\">\n            <input id=\"myInput2\" type=\"text\" name=\"myArt\" placeholder={this.props.ph} />\n          </div>\n    );\n  }\n\n}\n\nexport default AutocompleteArt;\n"]},"metadata":{},"sourceType":"module"}