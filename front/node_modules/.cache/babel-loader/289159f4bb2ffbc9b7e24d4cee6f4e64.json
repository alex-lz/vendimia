{"ast":null,"code":"var _jsxFileName = \"/Users/alex-lz/Desktop/vendimia/front/src/components/Autocomplete.js\";\nimport React, { Component } from 'react';\nimport './Autocomplete.css';\n\nclass Autocomplete extends Component {\n  componentDidMount() {\n    function autocomplete(inp, span, arr, claves, rfcs) {\n      /*the autocomplete function takes two arguments,\n      the text field element and an array of possible autocompleted values:*/\n      var currentFocus;\n      /*execute a function when someone writes in the text field:*/\n\n      inp.addEventListener(\"input\", function (e) {\n        var a,\n            b,\n            i,\n            val = this.value;\n        /*close any already open lists of autocompleted values*/\n\n        closeAllLists();\n\n        if (!val) {\n          return false;\n        }\n\n        currentFocus = -1;\n        /*create a DIV element that will contain the items (values):*/\n\n        a = document.createElement(\"DIV\");\n        a.setAttribute(\"id\", this.id + \"autocomplete-list\");\n        a.setAttribute(\"class\", \"autocomplete-items\");\n        /*append the DIV element as a child of the autocomplete container:*/\n\n        this.parentNode.appendChild(a);\n        /*for each item in the array...*/\n\n        for (i = 0; i < arr.length; i++) {\n          /*check if the item starts with the same letters as the text field value:*/\n          if (arr[i].substr(0, val.length).toUpperCase() == val.toUpperCase()) {\n            /*create a DIV element for each matching element:*/\n            b = document.createElement(\"DIV\");\n            /*make the matching letters bold:*/\n\n            b.innerHTML = \"<strong>\" + arr[i].substr(0, val.length) + \"</strong>\";\n            b.innerHTML += arr[i].substr(val.length);\n            /*insert a input field that will hold the current array item's value:*/\n\n            b.innerHTML += \"<input type='hidden' value='\" + arr[i] + \"'>\";\n            b.innerHTML += \"<input type='hidden' value='\" + claves[i] + \"'>\";\n            b.innerHTML += \"<input type='hidden' value='\" + rfcs[i] + \"'>\";\n            /*execute a function when someone clicks on the item value (DIV element):*/\n\n            b.addEventListener(\"click\", function (e) {\n              /*insert the value for the autocomplete text field:*/\n              let fullName = this.getElementsByTagName(\"input\")[0].value;\n              let clave = this.getElementsByTagName(\"input\")[1].value;\n              let rfc = this.getElementsByTagName(\"input\")[2].value;\n              inp.value = clave + ' - ' + fullName;\n              span.innerHTML = 'RFC: ' + rfc;\n              /*close the list of autocompleted values,\n              (or any other open lists of autocompleted values:*/\n\n              closeAllLists();\n            });\n            a.appendChild(b);\n          }\n        }\n      });\n      /*execute a function presses a key on the keyboard:*/\n\n      inp.addEventListener(\"keydown\", function (e) {\n        var x = document.getElementById(this.id + \"autocomplete-list\");\n        if (x) x = x.getElementsByTagName(\"div\");\n\n        if (e.keyCode == 40) {\n          /*If the arrow DOWN key is pressed,\n          increase the currentFocus variable:*/\n          currentFocus++;\n          /*and and make the current item more visible:*/\n\n          addActive(x);\n        } else if (e.keyCode == 38) {\n          //up\n\n          /*If the arrow UP key is pressed,\n          decrease the currentFocus variable:*/\n          currentFocus--;\n          /*and and make the current item more visible:*/\n\n          addActive(x);\n        } else if (e.keyCode == 13) {\n          /*If the ENTER key is pressed, prevent the form from being submitted,*/\n          e.preventDefault();\n\n          if (currentFocus > -1) {\n            /*and simulate a click on the \"active\" item:*/\n            if (x) x[currentFocus].click();\n          }\n        }\n      });\n\n      function addActive(x) {\n        /*a function to classify an item as \"active\":*/\n        if (!x) return false;\n        /*start by removing the \"active\" class on all items:*/\n\n        removeActive(x);\n        if (currentFocus >= x.length) currentFocus = 0;\n        if (currentFocus < 0) currentFocus = x.length - 1;\n        /*add class \"autocomplete-active\":*/\n\n        x[currentFocus].classList.add(\"autocomplete-active\");\n      }\n\n      function removeActive(x) {\n        /*a function to remove the \"active\" class from all autocomplete items:*/\n        for (var i = 0; i < x.length; i++) {\n          x[i].classList.remove(\"autocomplete-active\");\n        }\n      }\n\n      function closeAllLists(elmnt) {\n        /*close all autocomplete lists in the document,\n        except the one passed as an argument:*/\n        var x = document.getElementsByClassName(\"autocomplete-items\");\n\n        for (var i = 0; i < x.length; i++) {\n          if (elmnt != x[i] && elmnt != inp) {\n            x[i].parentNode.removeChild(x[i]);\n          }\n        }\n      }\n      /*execute a function when someone clicks in the document:*/\n\n\n      document.addEventListener(\"click\", function (e) {\n        closeAllLists(e.target);\n      });\n    }\n\n    autocomplete(document.getElementById(\"myInput\"), document.getElementById(\"mySpan\"), this.props.dates, this.props.claves, this.props.rfc);\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"autocomplete\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      id: \"myInput\",\n      type: \"text\",\n      name: \"myCountry\",\n      placeholder: this.props.ph,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      id: \"mySpan\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default Autocomplete;","map":{"version":3,"sources":["/Users/alex-lz/Desktop/vendimia/front/src/components/Autocomplete.js"],"names":["React","Component","Autocomplete","componentDidMount","autocomplete","inp","span","arr","claves","rfcs","currentFocus","addEventListener","e","a","b","i","val","value","closeAllLists","document","createElement","setAttribute","id","parentNode","appendChild","length","substr","toUpperCase","innerHTML","fullName","getElementsByTagName","clave","rfc","x","getElementById","keyCode","addActive","preventDefault","click","removeActive","classList","add","remove","elmnt","getElementsByClassName","removeChild","target","props","dates","render","ph"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './Autocomplete.css'\n\nclass Autocomplete extends Component {\n\n  componentDidMount() {\n    \n    function autocomplete(inp,span, arr, claves, rfcs) {\n        /*the autocomplete function takes two arguments,\n        the text field element and an array of possible autocompleted values:*/\n        var currentFocus;\n        /*execute a function when someone writes in the text field:*/\n        inp.addEventListener(\"input\", function(e) {\n            var a, b, i, val = this.value;\n            /*close any already open lists of autocompleted values*/\n            closeAllLists();\n            if (!val) { return false;}\n            currentFocus = -1;\n            /*create a DIV element that will contain the items (values):*/\n            a = document.createElement(\"DIV\");\n            a.setAttribute(\"id\", this.id + \"autocomplete-list\");\n            a.setAttribute(\"class\", \"autocomplete-items\");\n            /*append the DIV element as a child of the autocomplete container:*/\n            this.parentNode.appendChild(a);\n            /*for each item in the array...*/\n            for (i = 0; i < arr.length; i++) {\n              /*check if the item starts with the same letters as the text field value:*/\n              if (arr[i].substr(0, val.length).toUpperCase() == val.toUpperCase()) {\n                /*create a DIV element for each matching element:*/\n                b = document.createElement(\"DIV\");\n                /*make the matching letters bold:*/\n                b.innerHTML = \"<strong>\" + arr[i].substr(0, val.length) + \"</strong>\";\n                b.innerHTML += arr[i].substr(val.length);\n                /*insert a input field that will hold the current array item's value:*/\n                b.innerHTML += \"<input type='hidden' value='\" + arr[i] + \"'>\";\n                b.innerHTML += \"<input type='hidden' value='\" + claves[i] + \"'>\";\n                b.innerHTML += \"<input type='hidden' value='\" + rfcs[i] + \"'>\";\n                /*execute a function when someone clicks on the item value (DIV element):*/\n                b.addEventListener(\"click\", function(e) {\n                    /*insert the value for the autocomplete text field:*/\n                    let fullName = this.getElementsByTagName(\"input\")[0].value;\n                    let clave = this.getElementsByTagName(\"input\")[1].value;\n                    let rfc = this.getElementsByTagName(\"input\")[2].value;\n                    \n                    inp.value = clave + ' - ' + fullName;\n                    span.innerHTML = 'RFC: ' + rfc;\n                    /*close the list of autocompleted values,\n                    (or any other open lists of autocompleted values:*/\n                    closeAllLists();\n                });\n                a.appendChild(b);\n              }\n            }\n        });\n        /*execute a function presses a key on the keyboard:*/\n        inp.addEventListener(\"keydown\", function(e) {\n            var x = document.getElementById(this.id + \"autocomplete-list\");\n            if (x) x = x.getElementsByTagName(\"div\");\n            if (e.keyCode == 40) {\n              /*If the arrow DOWN key is pressed,\n              increase the currentFocus variable:*/\n              currentFocus++;\n              /*and and make the current item more visible:*/\n              addActive(x);\n            } else if (e.keyCode == 38) { //up\n              /*If the arrow UP key is pressed,\n              decrease the currentFocus variable:*/\n              currentFocus--;\n              /*and and make the current item more visible:*/\n              addActive(x);\n            } else if (e.keyCode == 13) {\n              /*If the ENTER key is pressed, prevent the form from being submitted,*/\n              e.preventDefault();\n              if (currentFocus > -1) {\n                /*and simulate a click on the \"active\" item:*/\n                if (x) x[currentFocus].click();\n              }\n            }\n        });\n        function addActive(x) {\n          /*a function to classify an item as \"active\":*/\n          if (!x) return false;\n          /*start by removing the \"active\" class on all items:*/\n          removeActive(x);\n          if (currentFocus >= x.length) currentFocus = 0;\n          if (currentFocus < 0) currentFocus = (x.length - 1);\n          /*add class \"autocomplete-active\":*/\n          x[currentFocus].classList.add(\"autocomplete-active\");\n        }\n        function removeActive(x) {\n          /*a function to remove the \"active\" class from all autocomplete items:*/\n          for (var i = 0; i < x.length; i++) {\n            x[i].classList.remove(\"autocomplete-active\");\n          }\n        }\n        function closeAllLists(elmnt) {\n          /*close all autocomplete lists in the document,\n          except the one passed as an argument:*/\n          var x = document.getElementsByClassName(\"autocomplete-items\");\n          for (var i = 0; i < x.length; i++) {\n            if (elmnt != x[i] && elmnt != inp) {\n              x[i].parentNode.removeChild(x[i]);\n            }\n          }\n        }\n        /*execute a function when someone clicks in the document:*/\n        document.addEventListener(\"click\", function (e) {\n            closeAllLists(e.target);\n        });\n      }\n\n      autocomplete(\n          document.getElementById(\"myInput\"), \n          document.getElementById(\"mySpan\"),\n          this.props.dates,\n          this.props.claves,\n          this.props.rfc\n      );\n  }\n\n  render() {\n    return (\n          <div className=\"autocomplete\">\n            <input id=\"myInput\" type=\"text\" name=\"myCountry\" placeholder={this.props.ph} />\n            <span id=\"mySpan\"></span>\n          </div>\n    );\n  }\n\n}\n\nexport default Autocomplete;\n"]},"metadata":{},"sourceType":"module"}